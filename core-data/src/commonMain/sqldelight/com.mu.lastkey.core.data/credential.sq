CREATE TABLE IF NOT EXISTS credentialEntity (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    createdAt INTEGER AS kotlinx.datetime.LocalDateTime,
    updatedAt INTEGER AS kotlinx.datetime.LocalDateTime
);

CREATE TABLE IF NOT EXISTS credentialSectionEntity (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    credential_id TEXT NOT NULL,
    createdAt INTEGER AS kotlinx.datetime.LocalDateTime,
    updatedAt INTEGER AS kotlinx.datetime.LocalDateTime,
    FOREIGN KEY(credential_id)
    REFERENCES credentialEntity(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS credentialSectionFieldEntity (
    id TEXT PRIMARY KEY NOT NULL,
    label TEXT NOT NULL,
    value TEXT NOT NULL,
    section_id TEXT NOT NULL,
    createdAt INTEGER AS kotlinx.datetime.LocalDateTime,
    updatedAt INTEGER AS kotlinx.datetime.LocalDateTime,
    FOREIGN KEY(section_id)
    REFERENCES credentialSectionEntity(id) ON DELETE CASCADE ON UPDATE CASCADE
);

insertCredentials:
INSERT OR REPLACE INTO credentialEntity
(id, name, createdAt, updatedAt)
VALUES (?, ?, ?, ?);

insertCredentialSections:
INSERT OR REPLACE INTO credentialSectionEntity
(id, name, credential_id, createdAt, updatedAt)
VALUES (?, ?, ?, ?, ?);

insertCredentialSectionFields:
INSERT OR REPLACE INTO credentialSectionFieldEntity
(id, label, value, section_id, createdAt, updatedAt)
VALUES (?, ?, ?, ?, ?, ?);

deleteCredentialsById:
DELETE FROM credentialEntity
WHERE id IN ?;

deleteCredentialSectionsById:
DELETE FROM credentialSectionEntity
WHERE id IN ?;

deleteCredentialSectionFieldsById:
DELETE FROM credentialSectionFieldEntity
WHERE id IN ?;

getCredentialById:
SELECT
credentialEntity.id AS id,
credentialEntity.name AS name,
credentialEntity.createdAt AS createdAt,
credentialEntity.updatedAt AS updatedAt,
credentialSectionEntity.id AS section_id,
credentialSectionEntity.name AS section_name,
credentialSectionEntity.createdAt AS section_createdAt,
credentialSectionEntity.updatedAt AS section_updatedAt,
credentialSectionFieldEntity.id AS field_id,
credentialSectionFieldEntity.label AS field_label,
credentialSectionFieldEntity.value AS field_value,
credentialSectionFieldEntity.section_id AS field_section_id,
credentialSectionFieldEntity.createdAt AS field_createdAt,
credentialSectionFieldEntity.updatedAt AS field_updatedAt
FROM credentialEntity
INNER JOIN credentialSectionEntity
ON credentialEntity.id == credentialSectionEntity.credential_id
INNER JOIN credentialSectionFieldEntity
ON credentialSectionFieldEntity.id == credentialSectionFieldEntity.section_id
WHERE credentialEntity.id = ?;

getCredentials:
SELECT * FROM credentialSectionEntity
LIMIT ? OFFSET ?;